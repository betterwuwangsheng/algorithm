#include <bits/stdc++.h>
using namespace std;

/**
题目背景
一年一度的“跳石头”比赛又要开始了!

题目描述
这项比赛将在一条笔直的河道中进行，河道中分布着一些巨大岩石。组委会已经选择好了两块岩石作为比赛起点和终点。在起点和终点之间，有 NN 块岩石（不含起点和终点的岩石）。在比赛过程中，选手们将从起点出发，每一步跳向相邻的岩石，直至到达终点。

为了提高比赛难度，组委会计划移走一些岩石，使得选手们在比赛过程中的最短跳跃距离尽可能长。由于预算限制，组委会至多从起点和终点之间移走 MM 块岩石（不能移走起点和终点的岩石）。

输入格式
第一行包含三个整数 L,N,ML,N,M，分别表示起点到终点的距离，起点和终点之间的岩石数，以及组委会至多移走的岩石数。保证 L \geq 1L≥1 且 N \geq M \geq 0N≥M≥0。

接下来 NN 行，每行一个整数，第 ii 行的整数 D_i( 0 < D_i < L)D
i
​
 (0<D
i
​
 <L)， 表示第 ii 块岩石与起点的距离。这些岩石按与起点距离从小到大的顺序给出，且不会有两个岩石出现在同一个位置。

输出格式
一个整数，即最短跳跃距离的最大值。

输入输出样例
输入 #1复制
25 5 2
2
11
14
17
21
输出 #1复制
4
说明/提示
输入输出样例 1 说明：将与起点距离为 22和 1414 的两个岩石移走后,最短的跳跃距离为 44(从与起点距离 1717 的岩石跳到距离 2121 的岩石,或者从距离 2121 的岩石跳到终点)。

另：对于 20\%20%的数据,0 ≤ M ≤ N ≤ 100≤M≤N≤10。

对于50\%50%的数据,0 ≤ M ≤ N ≤ 1000≤M≤N≤100。

对于 100\%100%的数据,0 ≤ M ≤ N ≤ 50,000,1 ≤ L ≤ 1,000,000,0000≤M≤N≤50,000,1≤L≤1,000,000,000。
*/
const int MX = 1e5;
int L, N, M;
int result = 0;
int pos[MX];

//检验函数，求出给定距离dist后 需要移走多少石头，是否不超过M
int check(int dist) {
    int i, last = 0, cnt = 0;
    for(i = 1; i <= N; i++) {
        if(pos[i] - last < dist)
            cnt++;
        else
            last = pos[i];
    }
    if(L - last < dist)
        cnt++;
    return cnt <= M;
}

int main() {
    //L  起点到终点的距离
    //N  起点和终点之间的岩石数
    //M  组委会至多移走的岩石数
    scanf("%d%d%d", &L, &N, &M);

    for(int i = 1; i <= N; i++) {
        scanf("%d", pos + i);
    }

    int left = 1, right = N + 1;
    //排序
    sort(pos + 1, pos + 1 + N);

    //二分
    while(left <= right) {
        int mid = left + (right - left) / 2;

        //中间值 >= 待查找值 -> 有可能在中间值的左边还有该数字
        if(check(mid)) {

            //暂存 mid
            result = mid;

            //在中间值的左边可能还有该数字
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    cout << result;
    return 0;
}
